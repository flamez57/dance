{"version":3,"sources":["App.js","config.js","serviceWorker.js","index.js"],"names":["TrData","this","props","users","map","user","i","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","key","id","className","title","name","sex","Component","Page","_ref","react_router__WEBPACK_IMPORTED_MODULE_6__","to","Home","href","About","Settings","List","_this","Object","D_centos_data_dance_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","D_centos_data_dance_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_centos_data_dance_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","isLoaded","axios","get","global","frApi","lists","then","response","setState","data","catch","error","console","log","App","history","browserHistory","path","component","onLineEnv","frontHost","detail","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9e8420d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Router, browserHistory, Route, Link } from 'react-router';\nimport './App.css';\nimport axios from 'axios';\nimport './config';\n\nclass TrData extends Component{\n    render(){\n        return (\n            this.props.users.map((user,i)=>{\n                return (\n                    <tr key={user.id} className=\"text-center\">\n                        <td>{user.id}</td>\n                        <td>{user.title}</td>\n                        <td>{user.name}</td>\n                        <td>{user.sex}</td>\n                    </tr>\n                )\n            })\n        )\n    }\n}\n\nconst Page = ({ title }) => (\n    <div className=\"App\">\n        <div className=\"App-header\">\n            <h2>{title}</h2>\n        </div>\n        <p className=\"App-intro\">\n            This is the {title} page.\n        </p>\n        <p>\n            <Link to=\"/\">Home</Link>\n        </p>\n        <p>\n            <Link to=\"/about\">About</Link>\n        </p>\n        <p>\n            <Link to=\"/settings\">Settings</Link>\n        </p>\n    </div>\n);\n\nconst Home = (props) => (\n    <div>\n        首页页面这里写\n        <a href=\"tel:17758023364\">17758023364</a>\n        <Page title=\"Home\"/>\n    </div>\n);\n\nconst About = (props) => (\n    <div>\n        about页面这里写\n        <Page title=\"About\"/>\n    </div>\n);\n\nconst Settings = (props) => (\n    <div>\n        set页面这里写\n        <Page title=\"Settings\"/>\n    </div>\n);\n\nclass List extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            users:[],\n            isLoaded:false\n        }\n    }\n\n    //当组件输出到 DOM 后会执行 componentDidMount()\n    componentDidMount(){\n        const _this=this;    //先存一下this，以防使用箭头函数this会指向我们不希望它所指向的对象。\n        axios.get(global.frApi.lists)\n        .then(function (response) {\n            _this.setState({\n                users:response.data,\n                isLoaded:true\n            });\n        })\n        .catch(function (error) {\n            console.log(error);\n            _this.setState({\n                isLoaded:false,\n                error:error\n            })\n        })\n    }\n\n   render() {\n       if (!this.state.isLoaded) {\n           return (\n               <div>Loading</div>\n           );\n       } else {\n           return (\n               <table className=\"table table-bordered\">\n                   <thead>\n                   <tr>\n                       <th className=\"text-center\">ID</th>\n                       <th className=\"text-center\">姓名</th>\n                       <th className=\"text-center\">年龄</th>\n                       <th className=\"text-center\">性别</th>\n                   </tr>\n                   </thead>\n                   <tbody>\n                   <TrData users={this.state.users}/>\n                   </tbody>\n               </table>\n           );\n       }\n   }\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Router history={browserHistory}>\n                    <Route path=\"/\" component={Home}/>\n                    <Route path=\"/about\" component={About}/>\n                    <Route path=\"/settings\" component={Settings}/>\n                </Router>\n                <List />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","/**\n * 全局变量\n */\n//域名配置\nglobal.onLineEnv = {\n    frontHost:'https://5b5e71c98e9f160014b88cc9.mockapi.io/api/v1',\n}\n\n//接口配置\nglobal.frApi = {\n    lists:global.onLineEnv.frontHost+'/lists',   //列表\n    detail:global.onLineEnv.frontHost+'/detail'   //详情\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'element-theme-default';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}